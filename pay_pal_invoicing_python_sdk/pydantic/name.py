# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class Name(BaseModel):
    # The prefix, or title, to the party's name.
    prefix: typing.Optional[str] = Field(None, alias='prefix')

    # When the party is a person, the party's given, or first, name.
    given_name: typing.Optional[str] = Field(None, alias='given_name')

    # When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.
    surname: typing.Optional[str] = Field(None, alias='surname')

    # When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.
    middle_name: typing.Optional[str] = Field(None, alias='middle_name')

    # The suffix for the party's name.
    suffix: typing.Optional[str] = Field(None, alias='suffix')

    # DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
    alternate_full_name: typing.Optional[str] = Field(None, alias='alternate_full_name')

    # When the party is a person, the party's full name.
    full_name: typing.Optional[str] = Field(None, alias='full_name')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
