# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_invoicing_python_sdk.pydantic.link_description import LinkDescription
from pay_pal_invoicing_python_sdk.pydantic.template_info import TemplateInfo
from pay_pal_invoicing_python_sdk.pydantic.template_settings import TemplateSettings
from pay_pal_invoicing_python_sdk.pydantic.unit_of_measure import UnitOfMeasure

class Template(BaseModel):
    # The ID of the template.
    id: typing.Optional[str] = Field(None, alias='id')

    # The template name.<blockquote><strong>Note:</strong> The template name must be unique.</blockquote>
    name: typing.Optional[str] = Field(None, alias='name')

    # Indicates whether this template is the default template. A invoicer can have one default template.
    default_template: typing.Optional[bool] = Field(None, alias='default_template')

    template_info: typing.Optional[TemplateInfo] = Field(None, alias='template_info')

    settings: typing.Optional[TemplateSettings] = Field(None, alias='settings')

    unit_of_measure: typing.Optional[UnitOfMeasure] = Field(None, alias='unit_of_measure')

    # Indicates whether this template is a invoicer-created custom template. The system generates non-custom templates.
    standard_template: typing.Optional[bool] = Field(None, alias='standard_template')

    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    links: typing.Optional[typing.List[LinkDescription]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
