# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_invoicing_python_sdk.pydantic.address_portable import AddressPortable
from pay_pal_invoicing_python_sdk.pydantic.email_address import EmailAddress
from pay_pal_invoicing_python_sdk.pydantic.link_description import LinkDescription
from pay_pal_invoicing_python_sdk.pydantic.phone_detail import PhoneDetail
from pay_pal_invoicing_python_sdk.pydantic.template import Template

class Templates(BaseModel):
    # An array of addresses in the user's PayPal profile.
    addresses: typing.Optional[typing.List[AddressPortable]] = Field(None, alias='addresses')

    emails: typing.Optional[EmailAddress] = Field(None, alias='emails')

    # An array of phone numbers in the user's PayPal profile.
    phones: typing.Optional[typing.List[PhoneDetail]] = Field(None, alias='phones')

    # An array of details for each template. If `fields` is `none`, returns only the template name, ID, and default status.
    templates: typing.Optional[typing.List[Template]] = Field(None, alias='templates')

    # An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
    links: typing.Optional[typing.List[LinkDescription]] = Field(None, alias='links')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
