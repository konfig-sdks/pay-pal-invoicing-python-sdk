# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class AddressPortable(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
    """


    class MetaOapg:
        required = {
            "country_code",
        }
        
        class properties:
        
            @staticmethod
            def country_code() -> typing.Type['CountryCode']:
                return CountryCode
            
            
            class address_line_1(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class address_line_2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class address_line_3(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class admin_area_4(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class admin_area_3(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class admin_area_2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 120
            
            
            class admin_area_1(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class postal_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 60
        
            @staticmethod
            def address_details() -> typing.Type['AddressPortableAddressDetails']:
                return AddressPortableAddressDetails
            __annotations__ = {
                "country_code": country_code,
                "address_line_1": address_line_1,
                "address_line_2": address_line_2,
                "address_line_3": address_line_3,
                "admin_area_4": admin_area_4,
                "admin_area_3": admin_area_3,
                "admin_area_2": admin_area_2,
                "admin_area_1": admin_area_1,
                "postal_code": postal_code,
                "address_details": address_details,
            }
    
    country_code: 'CountryCode'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_line_1"]) -> MetaOapg.properties.address_line_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_line_2"]) -> MetaOapg.properties.address_line_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_line_3"]) -> MetaOapg.properties.address_line_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_area_4"]) -> MetaOapg.properties.admin_area_4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_area_3"]) -> MetaOapg.properties.admin_area_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_area_2"]) -> MetaOapg.properties.admin_area_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin_area_1"]) -> MetaOapg.properties.admin_area_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postal_code"]) -> MetaOapg.properties.postal_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_details"]) -> 'AddressPortableAddressDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["country_code", "address_line_1", "address_line_2", "address_line_3", "admin_area_4", "admin_area_3", "admin_area_2", "admin_area_1", "postal_code", "address_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> 'CountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_line_1"]) -> typing.Union[MetaOapg.properties.address_line_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_line_2"]) -> typing.Union[MetaOapg.properties.address_line_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_line_3"]) -> typing.Union[MetaOapg.properties.address_line_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_area_4"]) -> typing.Union[MetaOapg.properties.admin_area_4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_area_3"]) -> typing.Union[MetaOapg.properties.admin_area_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_area_2"]) -> typing.Union[MetaOapg.properties.admin_area_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin_area_1"]) -> typing.Union[MetaOapg.properties.admin_area_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postal_code"]) -> typing.Union[MetaOapg.properties.postal_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_details"]) -> typing.Union['AddressPortableAddressDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["country_code", "address_line_1", "address_line_2", "address_line_3", "admin_area_4", "admin_area_3", "admin_area_2", "admin_area_1", "postal_code", "address_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country_code: 'CountryCode',
        address_line_1: typing.Union[MetaOapg.properties.address_line_1, str, schemas.Unset] = schemas.unset,
        address_line_2: typing.Union[MetaOapg.properties.address_line_2, str, schemas.Unset] = schemas.unset,
        address_line_3: typing.Union[MetaOapg.properties.address_line_3, str, schemas.Unset] = schemas.unset,
        admin_area_4: typing.Union[MetaOapg.properties.admin_area_4, str, schemas.Unset] = schemas.unset,
        admin_area_3: typing.Union[MetaOapg.properties.admin_area_3, str, schemas.Unset] = schemas.unset,
        admin_area_2: typing.Union[MetaOapg.properties.admin_area_2, str, schemas.Unset] = schemas.unset,
        admin_area_1: typing.Union[MetaOapg.properties.admin_area_1, str, schemas.Unset] = schemas.unset,
        postal_code: typing.Union[MetaOapg.properties.postal_code, str, schemas.Unset] = schemas.unset,
        address_details: typing.Union['AddressPortableAddressDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressPortable':
        return super().__new__(
            cls,
            *args,
            country_code=country_code,
            address_line_1=address_line_1,
            address_line_2=address_line_2,
            address_line_3=address_line_3,
            admin_area_4=admin_area_4,
            admin_area_3=admin_area_3,
            admin_area_2=admin_area_2,
            admin_area_1=admin_area_1,
            postal_code=postal_code,
            address_details=address_details,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.address_portable_address_details import AddressPortableAddressDetails
from pay_pal_invoicing_python_sdk.model.country_code import CountryCode
