# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class PaymentDetail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment details of the invoice. Includes payment type, method, date, discount, and transaction type.
    """


    class MetaOapg:
        required = {
            "method",
        }
        
        class properties:
        
            @staticmethod
            def method() -> typing.Type['PaymentMethod']:
                return PaymentMethod
        
            @staticmethod
            def type() -> typing.Type['PaymentType']:
                return PaymentType
            
            
            class payment_id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def payment_date() -> typing.Type['DateNoTime']:
                return DateNoTime
            
            
            class note(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def amount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def shipping_info() -> typing.Type['ContactNameAddress']:
                return ContactNameAddress
            __annotations__ = {
                "method": method,
                "type": type,
                "payment_id": payment_id,
                "payment_date": payment_date,
                "note": note,
                "amount": amount,
                "shipping_info": shipping_info,
            }
    
    method: 'PaymentMethod'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> 'PaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'PaymentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_id"]) -> MetaOapg.properties.payment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_date"]) -> 'DateNoTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_info"]) -> 'ContactNameAddress': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["method", "type", "payment_id", "payment_date", "note", "amount", "shipping_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> 'PaymentMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['PaymentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_id"]) -> typing.Union[MetaOapg.properties.payment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_date"]) -> typing.Union['DateNoTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_info"]) -> typing.Union['ContactNameAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["method", "type", "payment_id", "payment_date", "note", "amount", "shipping_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method: 'PaymentMethod',
        type: typing.Union['PaymentType', schemas.Unset] = schemas.unset,
        payment_id: typing.Union[MetaOapg.properties.payment_id, str, schemas.Unset] = schemas.unset,
        payment_date: typing.Union['DateNoTime', schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        amount: typing.Union['Money', schemas.Unset] = schemas.unset,
        shipping_info: typing.Union['ContactNameAddress', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentDetail':
        return super().__new__(
            cls,
            *args,
            method=method,
            type=type,
            payment_id=payment_id,
            payment_date=payment_date,
            note=note,
            amount=amount,
            shipping_info=shipping_info,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.contact_name_address import ContactNameAddress
from pay_pal_invoicing_python_sdk.model.date_no_time import DateNoTime
from pay_pal_invoicing_python_sdk.model.money import Money
from pay_pal_invoicing_python_sdk.model.payment_method import PaymentMethod
from pay_pal_invoicing_python_sdk.model.payment_type import PaymentType
