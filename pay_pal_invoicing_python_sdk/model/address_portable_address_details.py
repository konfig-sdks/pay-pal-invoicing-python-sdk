# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class AddressPortableAddressDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
    """


    class MetaOapg:
        
        class properties:
            
            
            class street_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class street_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class street_type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class delivery_service(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class building_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class sub_building(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            __annotations__ = {
                "street_number": street_number,
                "street_name": street_name,
                "street_type": street_type,
                "delivery_service": delivery_service,
                "building_name": building_name,
                "sub_building": sub_building,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_number"]) -> MetaOapg.properties.street_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_name"]) -> MetaOapg.properties.street_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_type"]) -> MetaOapg.properties.street_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_service"]) -> MetaOapg.properties.delivery_service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building_name"]) -> MetaOapg.properties.building_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_building"]) -> MetaOapg.properties.sub_building: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["street_number", "street_name", "street_type", "delivery_service", "building_name", "sub_building", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_number"]) -> typing.Union[MetaOapg.properties.street_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_name"]) -> typing.Union[MetaOapg.properties.street_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_type"]) -> typing.Union[MetaOapg.properties.street_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_service"]) -> typing.Union[MetaOapg.properties.delivery_service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building_name"]) -> typing.Union[MetaOapg.properties.building_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_building"]) -> typing.Union[MetaOapg.properties.sub_building, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["street_number", "street_name", "street_type", "delivery_service", "building_name", "sub_building", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        street_number: typing.Union[MetaOapg.properties.street_number, str, schemas.Unset] = schemas.unset,
        street_name: typing.Union[MetaOapg.properties.street_name, str, schemas.Unset] = schemas.unset,
        street_type: typing.Union[MetaOapg.properties.street_type, str, schemas.Unset] = schemas.unset,
        delivery_service: typing.Union[MetaOapg.properties.delivery_service, str, schemas.Unset] = schemas.unset,
        building_name: typing.Union[MetaOapg.properties.building_name, str, schemas.Unset] = schemas.unset,
        sub_building: typing.Union[MetaOapg.properties.sub_building, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressPortableAddressDetails':
        return super().__new__(
            cls,
            *args,
            street_number=street_number,
            street_name=street_name,
            street_type=street_type,
            delivery_service=delivery_service,
            building_name=building_name,
            sub_building=sub_building,
            _configuration=_configuration,
            **kwargs,
        )
