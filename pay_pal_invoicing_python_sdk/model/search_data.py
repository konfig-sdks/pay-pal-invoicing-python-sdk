# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class SearchData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The invoice search parameters.
    """


    class MetaOapg:
        
        class properties:
            
            
            class recipient_email(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 254
            
            
            class recipient_first_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 140
            
            
            class recipient_last_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 140
            
            
            class recipient_business_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 300
            
            
            class invoice_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
            
            
            class status(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 5
                    
                    @staticmethod
                    def items() -> typing.Type['InvoiceStatus']:
                        return InvoiceStatus
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['InvoiceStatus'], typing.List['InvoiceStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InvoiceStatus':
                    return super().__getitem__(i)
            
            
            class reference(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 120
        
            @staticmethod
            def currency_code() -> typing.Type['CurrencyCode']:
                return CurrencyCode
            
            
            class memo(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
        
            @staticmethod
            def total_amount_range() -> typing.Type['AmountRange']:
                return AmountRange
        
            @staticmethod
            def invoice_date_range() -> typing.Type['DateRange']:
                return DateRange
        
            @staticmethod
            def due_date_range() -> typing.Type['DateRange']:
                return DateRange
        
            @staticmethod
            def payment_date_range() -> typing.Type['DateTimeRange']:
                return DateTimeRange
        
            @staticmethod
            def creation_date_range() -> typing.Type['DateTimeRange']:
                return DateTimeRange
            archived = schemas.BoolSchema
        
            @staticmethod
            def fields() -> typing.Type['SearchDataFields']:
                return SearchDataFields
            __annotations__ = {
                "recipient_email": recipient_email,
                "recipient_first_name": recipient_first_name,
                "recipient_last_name": recipient_last_name,
                "recipient_business_name": recipient_business_name,
                "invoice_number": invoice_number,
                "status": status,
                "reference": reference,
                "currency_code": currency_code,
                "memo": memo,
                "total_amount_range": total_amount_range,
                "invoice_date_range": invoice_date_range,
                "due_date_range": due_date_range,
                "payment_date_range": payment_date_range,
                "creation_date_range": creation_date_range,
                "archived": archived,
                "fields": fields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_email"]) -> MetaOapg.properties.recipient_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_first_name"]) -> MetaOapg.properties.recipient_first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_last_name"]) -> MetaOapg.properties.recipient_last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_business_name"]) -> MetaOapg.properties.recipient_business_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_number"]) -> MetaOapg.properties.invoice_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference"]) -> MetaOapg.properties.reference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_code"]) -> 'CurrencyCode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_amount_range"]) -> 'AmountRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_date_range"]) -> 'DateRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date_range"]) -> 'DateRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_date_range"]) -> 'DateTimeRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_date_range"]) -> 'DateTimeRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> 'SearchDataFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["recipient_email", "recipient_first_name", "recipient_last_name", "recipient_business_name", "invoice_number", "status", "reference", "currency_code", "memo", "total_amount_range", "invoice_date_range", "due_date_range", "payment_date_range", "creation_date_range", "archived", "fields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_email"]) -> typing.Union[MetaOapg.properties.recipient_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_first_name"]) -> typing.Union[MetaOapg.properties.recipient_first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_last_name"]) -> typing.Union[MetaOapg.properties.recipient_last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_business_name"]) -> typing.Union[MetaOapg.properties.recipient_business_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_number"]) -> typing.Union[MetaOapg.properties.invoice_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference"]) -> typing.Union[MetaOapg.properties.reference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_code"]) -> typing.Union['CurrencyCode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_amount_range"]) -> typing.Union['AmountRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_date_range"]) -> typing.Union['DateRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date_range"]) -> typing.Union['DateRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_date_range"]) -> typing.Union['DateTimeRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_date_range"]) -> typing.Union['DateTimeRange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union['SearchDataFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["recipient_email", "recipient_first_name", "recipient_last_name", "recipient_business_name", "invoice_number", "status", "reference", "currency_code", "memo", "total_amount_range", "invoice_date_range", "due_date_range", "payment_date_range", "creation_date_range", "archived", "fields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        recipient_email: typing.Union[MetaOapg.properties.recipient_email, str, schemas.Unset] = schemas.unset,
        recipient_first_name: typing.Union[MetaOapg.properties.recipient_first_name, str, schemas.Unset] = schemas.unset,
        recipient_last_name: typing.Union[MetaOapg.properties.recipient_last_name, str, schemas.Unset] = schemas.unset,
        recipient_business_name: typing.Union[MetaOapg.properties.recipient_business_name, str, schemas.Unset] = schemas.unset,
        invoice_number: typing.Union[MetaOapg.properties.invoice_number, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, list, tuple, schemas.Unset] = schemas.unset,
        reference: typing.Union[MetaOapg.properties.reference, str, schemas.Unset] = schemas.unset,
        currency_code: typing.Union['CurrencyCode', schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        total_amount_range: typing.Union['AmountRange', schemas.Unset] = schemas.unset,
        invoice_date_range: typing.Union['DateRange', schemas.Unset] = schemas.unset,
        due_date_range: typing.Union['DateRange', schemas.Unset] = schemas.unset,
        payment_date_range: typing.Union['DateTimeRange', schemas.Unset] = schemas.unset,
        creation_date_range: typing.Union['DateTimeRange', schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        fields: typing.Union['SearchDataFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchData':
        return super().__new__(
            cls,
            *args,
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.amount_range import AmountRange
from pay_pal_invoicing_python_sdk.model.currency_code import CurrencyCode
from pay_pal_invoicing_python_sdk.model.date_range import DateRange
from pay_pal_invoicing_python_sdk.model.date_time_range import DateTimeRange
from pay_pal_invoicing_python_sdk.model.invoice_status import InvoiceStatus
from pay_pal_invoicing_python_sdk.model.search_data_fields import SearchDataFields
