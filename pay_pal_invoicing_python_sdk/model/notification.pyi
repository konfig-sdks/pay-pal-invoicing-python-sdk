# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class Notification(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The email or SMS notification to send to the invoicer or payer on sending an invoice.
    """


    class MetaOapg:
        
        class properties:
            
            
            class subject(
                schemas.StrSchema
            ):
                pass
            
            
            class note(
                schemas.StrSchema
            ):
                pass
            send_to_invoicer = schemas.BoolSchema
            send_to_recipient = schemas.BoolSchema
            
            
            class additional_recipients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EmailAddress']:
                        return EmailAddress
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EmailAddress'], typing.List['EmailAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additional_recipients':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EmailAddress':
                    return super().__getitem__(i)
            __annotations__ = {
                "subject": subject,
                "note": note,
                "send_to_invoicer": send_to_invoicer,
                "send_to_recipient": send_to_recipient,
                "additional_recipients": additional_recipients,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_to_invoicer"]) -> MetaOapg.properties.send_to_invoicer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["send_to_recipient"]) -> MetaOapg.properties.send_to_recipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_recipients"]) -> MetaOapg.properties.additional_recipients: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subject", "note", "send_to_invoicer", "send_to_recipient", "additional_recipients", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_to_invoicer"]) -> typing.Union[MetaOapg.properties.send_to_invoicer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["send_to_recipient"]) -> typing.Union[MetaOapg.properties.send_to_recipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_recipients"]) -> typing.Union[MetaOapg.properties.additional_recipients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subject", "note", "send_to_invoicer", "send_to_recipient", "additional_recipients", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        send_to_invoicer: typing.Union[MetaOapg.properties.send_to_invoicer, bool, schemas.Unset] = schemas.unset,
        send_to_recipient: typing.Union[MetaOapg.properties.send_to_recipient, bool, schemas.Unset] = schemas.unset,
        additional_recipients: typing.Union[MetaOapg.properties.additional_recipients, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Notification':
        return super().__new__(
            cls,
            *args,
            subject=subject,
            note=note,
            send_to_invoicer=send_to_invoicer,
            send_to_recipient=send_to_recipient,
            additional_recipients=additional_recipients,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.email_address import EmailAddress
