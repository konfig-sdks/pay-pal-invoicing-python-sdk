# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An array of invoice line item information. The maximum items for an invoice is `100`.
    """


    class MetaOapg:
        required = {
            "quantity",
            "name",
            "unit_amount",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 200
            
            
            class quantity(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 14
                    min_length = 0
        
            @staticmethod
            def unit_amount() -> typing.Type['Money']:
                return Money
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 22
        
            @staticmethod
            def tax() -> typing.Type['Tax']:
                return Tax
        
            @staticmethod
            def item_date() -> typing.Type['DateNoTime']:
                return DateNoTime
        
            @staticmethod
            def discount() -> typing.Type['Discount']:
                return Discount
        
            @staticmethod
            def unit_of_measure() -> typing.Type['UnitOfMeasure']:
                return UnitOfMeasure
            __annotations__ = {
                "name": name,
                "quantity": quantity,
                "unit_amount": unit_amount,
                "description": description,
                "id": id,
                "tax": tax,
                "item_date": item_date,
                "discount": discount,
                "unit_of_measure": unit_of_measure,
            }
    
    quantity: MetaOapg.properties.quantity
    name: MetaOapg.properties.name
    unit_amount: 'Money'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> 'Tax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item_date"]) -> 'DateNoTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> 'Discount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit_of_measure"]) -> 'UnitOfMeasure': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "quantity", "unit_amount", "description", "id", "tax", "item_date", "discount", "unit_of_measure", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_amount"]) -> 'Money': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union['Tax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item_date"]) -> typing.Union['DateNoTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> typing.Union['Discount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit_of_measure"]) -> typing.Union['UnitOfMeasure', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "quantity", "unit_amount", "description", "id", "tax", "item_date", "discount", "unit_of_measure", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        quantity: typing.Union[MetaOapg.properties.quantity, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        unit_amount: 'Money',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        tax: typing.Union['Tax', schemas.Unset] = schemas.unset,
        item_date: typing.Union['DateNoTime', schemas.Unset] = schemas.unset,
        discount: typing.Union['Discount', schemas.Unset] = schemas.unset,
        unit_of_measure: typing.Union['UnitOfMeasure', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Item':
        return super().__new__(
            cls,
            *args,
            quantity=quantity,
            name=name,
            unit_amount=unit_amount,
            description=description,
            id=id,
            tax=tax,
            item_date=item_date,
            discount=discount,
            unit_of_measure=unit_of_measure,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.date_no_time import DateNoTime
from pay_pal_invoicing_python_sdk.model.discount import Discount
from pay_pal_invoicing_python_sdk.model.money import Money
from pay_pal_invoicing_python_sdk.model.tax import Tax
from pay_pal_invoicing_python_sdk.model.unit_of_measure import UnitOfMeasure
