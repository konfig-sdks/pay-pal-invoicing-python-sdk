# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401


class TemplateConfiguration(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The template configuration details. Includes tax information, tip, and partial payment.
    """


    class MetaOapg:
        
        class properties:
            tax_calculated_after_discount = schemas.BoolSchema
            tax_inclusive = schemas.BoolSchema
            allow_tip = schemas.BoolSchema
        
            @staticmethod
            def partial_payment() -> typing.Type['PartialPayment']:
                return PartialPayment
            __annotations__ = {
                "tax_calculated_after_discount": tax_calculated_after_discount,
                "tax_inclusive": tax_inclusive,
                "allow_tip": allow_tip,
                "partial_payment": partial_payment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_calculated_after_discount"]) -> MetaOapg.properties.tax_calculated_after_discount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax_inclusive"]) -> MetaOapg.properties.tax_inclusive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_tip"]) -> MetaOapg.properties.allow_tip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partial_payment"]) -> 'PartialPayment': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tax_calculated_after_discount", "tax_inclusive", "allow_tip", "partial_payment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_calculated_after_discount"]) -> typing.Union[MetaOapg.properties.tax_calculated_after_discount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax_inclusive"]) -> typing.Union[MetaOapg.properties.tax_inclusive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_tip"]) -> typing.Union[MetaOapg.properties.allow_tip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partial_payment"]) -> typing.Union['PartialPayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tax_calculated_after_discount", "tax_inclusive", "allow_tip", "partial_payment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tax_calculated_after_discount: typing.Union[MetaOapg.properties.tax_calculated_after_discount, bool, schemas.Unset] = schemas.unset,
        tax_inclusive: typing.Union[MetaOapg.properties.tax_inclusive, bool, schemas.Unset] = schemas.unset,
        allow_tip: typing.Union[MetaOapg.properties.allow_tip, bool, schemas.Unset] = schemas.unset,
        partial_payment: typing.Union['PartialPayment', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateConfiguration':
        return super().__new__(
            cls,
            *args,
            tax_calculated_after_discount=tax_calculated_after_discount,
            tax_inclusive=tax_inclusive,
            allow_tip=allow_tip,
            partial_payment=partial_payment,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_invoicing_python_sdk.model.partial_payment import PartialPayment
