# coding: utf-8

"""
    Invoices

    Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href=\"/docs/invoicing/\">Invoicing Overview</a> and the <a href=\"/docs/invoicing/basic-integration/\">Invoicing Integration Guide</a>.

    The version of the OpenAPI document: 2.3
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from pay_pal_invoicing_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from pay_pal_invoicing_python_sdk.api_response import AsyncGeneratorResponse
from pay_pal_invoicing_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_invoicing_python_sdk import schemas  # noqa: F401

from pay_pal_invoicing_python_sdk.model.searchinvoices_list_response import SearchinvoicesListResponse as SearchinvoicesListResponseSchema
from pay_pal_invoicing_python_sdk.model.date_time_range import DateTimeRange as DateTimeRangeSchema
from pay_pal_invoicing_python_sdk.model.error403 import Error403 as Error403Schema
from pay_pal_invoicing_python_sdk.model.currency_code import CurrencyCode as CurrencyCodeSchema
from pay_pal_invoicing_python_sdk.model.error_default import ErrorDefault as ErrorDefaultSchema
from pay_pal_invoicing_python_sdk.model.invoices import Invoices as InvoicesSchema
from pay_pal_invoicing_python_sdk.model.date_range import DateRange as DateRangeSchema
from pay_pal_invoicing_python_sdk.model.searchinvoices_list400_response import SearchinvoicesList400Response as SearchinvoicesList400ResponseSchema
from pay_pal_invoicing_python_sdk.model.search_data_fields import SearchDataFields as SearchDataFieldsSchema
from pay_pal_invoicing_python_sdk.model.invoice_status import InvoiceStatus as InvoiceStatusSchema
from pay_pal_invoicing_python_sdk.model.search_data import SearchData as SearchDataSchema
from pay_pal_invoicing_python_sdk.model.amount_range import AmountRange as AmountRangeSchema

from pay_pal_invoicing_python_sdk.type.date_range import DateRange
from pay_pal_invoicing_python_sdk.type.invoices import Invoices
from pay_pal_invoicing_python_sdk.type.searchinvoices_list_response import SearchinvoicesListResponse
from pay_pal_invoicing_python_sdk.type.error_default import ErrorDefault
from pay_pal_invoicing_python_sdk.type.currency_code import CurrencyCode
from pay_pal_invoicing_python_sdk.type.search_data_fields import SearchDataFields
from pay_pal_invoicing_python_sdk.type.searchinvoices_list400_response import SearchinvoicesList400Response
from pay_pal_invoicing_python_sdk.type.date_time_range import DateTimeRange
from pay_pal_invoicing_python_sdk.type.invoice_status import InvoiceStatus
from pay_pal_invoicing_python_sdk.type.amount_range import AmountRange
from pay_pal_invoicing_python_sdk.type.search_data import SearchData
from pay_pal_invoicing_python_sdk.type.error403 import Error403

from ...api_client import Dictionary
from pay_pal_invoicing_python_sdk.pydantic.error403 import Error403 as Error403Pydantic
from pay_pal_invoicing_python_sdk.pydantic.error_default import ErrorDefault as ErrorDefaultPydantic
from pay_pal_invoicing_python_sdk.pydantic.date_time_range import DateTimeRange as DateTimeRangePydantic
from pay_pal_invoicing_python_sdk.pydantic.invoice_status import InvoiceStatus as InvoiceStatusPydantic
from pay_pal_invoicing_python_sdk.pydantic.searchinvoices_list400_response import SearchinvoicesList400Response as SearchinvoicesList400ResponsePydantic
from pay_pal_invoicing_python_sdk.pydantic.invoices import Invoices as InvoicesPydantic
from pay_pal_invoicing_python_sdk.pydantic.searchinvoices_list_response import SearchinvoicesListResponse as SearchinvoicesListResponsePydantic
from pay_pal_invoicing_python_sdk.pydantic.search_data_fields import SearchDataFields as SearchDataFieldsPydantic
from pay_pal_invoicing_python_sdk.pydantic.date_range import DateRange as DateRangePydantic
from pay_pal_invoicing_python_sdk.pydantic.search_data import SearchData as SearchDataPydantic
from pay_pal_invoicing_python_sdk.pydantic.currency_code import CurrencyCode as CurrencyCodePydantic
from pay_pal_invoicing_python_sdk.pydantic.amount_range import AmountRange as AmountRangePydantic

from . import path

# Query params


class PageSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 1000
        inclusive_minimum = 1


class PageSizeSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 100
        inclusive_minimum = 1
TotalRequiredSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'page_size': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'total_required': typing.Union[TotalRequiredSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="page_size",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_total_required = api_client.QueryParameter(
    name="total_required",
    style=api_client.ParameterStyle.FORM,
    schema=TotalRequiredSchema,
    explode=True,
)
# body param
SchemaForRequestBodyApplicationJson = SearchDataSchema


request_body_search_data = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'Oauth2',
]
SchemaFor200ResponseBodyApplicationJson = InvoicesSchema
SchemaFor200ResponseBodyMultipartMixed = InvoicesSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: Invoices


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: Invoices


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'multipart/mixed': api_client.MediaType(
            schema=SchemaFor200ResponseBodyMultipartMixed),
    },
)
SchemaFor400ResponseBodyApplicationJson = SearchinvoicesListResponseSchema
SchemaFor400ResponseBodyMultipartMixed = SearchinvoicesList400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: SearchinvoicesListResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: SearchinvoicesListResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
        'multipart/mixed': api_client.MediaType(
            schema=SchemaFor400ResponseBodyMultipartMixed),
    },
)
SchemaFor403ResponseBodyApplicationJson = Error403Schema
SchemaFor403ResponseBodyMultipartMixed = Error403Schema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: Error403


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: Error403


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
        'multipart/mixed': api_client.MediaType(
            schema=SchemaFor403ResponseBodyMultipartMixed),
    },
)
SchemaFor0ResponseBodyApplicationJson = ErrorDefaultSchema


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    body: ErrorDefault


@dataclass
class ApiResponseForDefaultAsync(api_client.AsyncApiResponse):
    body: ErrorDefault


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '403': _response_for_403,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
    'multipart/mixed',
)


class BaseApi(api_client.Api):

    def _list_mapped_args(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _body = {}
        if recipient_email is not None:
            _body["recipient_email"] = recipient_email
        if recipient_first_name is not None:
            _body["recipient_first_name"] = recipient_first_name
        if recipient_last_name is not None:
            _body["recipient_last_name"] = recipient_last_name
        if recipient_business_name is not None:
            _body["recipient_business_name"] = recipient_business_name
        if invoice_number is not None:
            _body["invoice_number"] = invoice_number
        if status is not None:
            _body["status"] = status
        if reference is not None:
            _body["reference"] = reference
        if currency_code is not None:
            _body["currency_code"] = currency_code
        if memo is not None:
            _body["memo"] = memo
        if total_amount_range is not None:
            _body["total_amount_range"] = total_amount_range
        if invoice_date_range is not None:
            _body["invoice_date_range"] = invoice_date_range
        if due_date_range is not None:
            _body["due_date_range"] = due_date_range
        if payment_date_range is not None:
            _body["payment_date_range"] = payment_date_range
        if creation_date_range is not None:
            _body["creation_date_range"] = creation_date_range
        if archived is not None:
            _body["archived"] = archived
        if fields is not None:
            _body["fields"] = fields
        args.body = _body
        if page is not None:
            _query_params["page"] = page
        if page_size is not None:
            _query_params["page_size"] = page_size
        if total_required is not None:
            _query_params["total_required"] = total_required
        args.query = _query_params
        return args

    async def _alist_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Search for invoices
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_page,
            request_query_page_size,
            request_query_total_required,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/invoicing/search-invoices',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_search_data.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserializationAsync(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Search for invoices
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_page,
            request_query_page_size,
            request_query_total_required,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/invoicing/search-invoices',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_search_data.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            default_response = _status_code_to_response.get('default')
            if default_response:
                api_response = default_response.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response.http_response,
                    round_trip_time=response.round_trip_time,
                    status=response.http_response.status,
                    headers=response.http_response.headers,
                )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_mapped_args(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
        )
        return await self._alist_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def list(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_mapped_args(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
        )
        return self._list_oapg(
            body=args.body,
            query_params=args.query,
        )

class List(BaseApi):

    async def alist(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
        validate: bool = False,
        **kwargs,
    ) -> InvoicesPydantic:
        raw_response = await self.raw.alist(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
            **kwargs,
        )
        if validate:
            return InvoicesPydantic(**raw_response.body)
        return api_client.construct_model_instance(InvoicesPydantic, raw_response.body)
    
    
    def list(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
        validate: bool = False,
    ) -> InvoicesPydantic:
        raw_response = self.raw.list(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
        )
        if validate:
            return InvoicesPydantic(**raw_response.body)
        return api_client.construct_model_instance(InvoicesPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseForDefaultAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_mapped_args(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
        )
        return await self._alist_oapg(
            body=args.body,
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        recipient_email: typing.Optional[str] = None,
        recipient_first_name: typing.Optional[str] = None,
        recipient_last_name: typing.Optional[str] = None,
        recipient_business_name: typing.Optional[str] = None,
        invoice_number: typing.Optional[str] = None,
        status: typing.Optional[typing.List[InvoiceStatus]] = None,
        reference: typing.Optional[str] = None,
        currency_code: typing.Optional[CurrencyCode] = None,
        memo: typing.Optional[str] = None,
        total_amount_range: typing.Optional[AmountRange] = None,
        invoice_date_range: typing.Optional[DateRange] = None,
        due_date_range: typing.Optional[DateRange] = None,
        payment_date_range: typing.Optional[DateTimeRange] = None,
        creation_date_range: typing.Optional[DateTimeRange] = None,
        archived: typing.Optional[bool] = None,
        fields: typing.Optional[SearchDataFields] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        total_required: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_mapped_args(
            recipient_email=recipient_email,
            recipient_first_name=recipient_first_name,
            recipient_last_name=recipient_last_name,
            recipient_business_name=recipient_business_name,
            invoice_number=invoice_number,
            status=status,
            reference=reference,
            currency_code=currency_code,
            memo=memo,
            total_amount_range=total_amount_range,
            invoice_date_range=invoice_date_range,
            due_date_range=due_date_range,
            payment_date_range=payment_date_range,
            creation_date_range=creation_date_range,
            archived=archived,
            fields=fields,
            page=page,
            page_size=page_size,
            total_required=total_required,
        )
        return self._list_oapg(
            body=args.body,
            query_params=args.query,
        )

